<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">
        
        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">
        
        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
              
        <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
]>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" version="5.0"
  xml:id="cdn-devguide" status="">
  <title>Rackspace CDN Developer Guide</title>
  <?rax status.bar.text.font.size="40px"
     status.bar.text="Early Access"
      canonical.url.base="http://docs.rackspace.com/cdn/api/v1.0/cdn-devguide/content"?>
  <titleabbrev>CDN Developer Guide</titleabbrev>
  <info>
    <copyright>
      <year>2015</year>
      <holder>Rackspace US, Inc.</holder>
    </copyright>
    <releaseinfo>API v1.0 Early Access</releaseinfo>
    <productname>Rackspace CDN</productname>
    <!--Note that the <productname> text matches the first few words of the title. The build system splits the title into productname + rest of title on the pdf cover.-->
    <pubdate>2015-01-07<!--If you leave the <pubdate> element empty, the build system inserts today's date automatically. --></pubdate>
    <revhistory>
      <revision>
        <date>2015-01-07</date>
        <revdescription>
          <para>Initial Early Access (EA) release.</para>
        </revdescription>
      </revision>
    </revhistory>
    <legalnotice role="rs-api">
      <annotation>
        <remark>Copyright details are filled in by the build system.</remark>
      </annotation>
    </legalnotice>
    <abstract>
      <para>This document is intended for software developers interested in developing applications
        using the Rackspace CDN Application Programming Interface (<abbrev>API</abbrev>). </para>
    </abstract>
    <!-- 
       The values in raxm:metadata are used to control where the content appears on the landing page in docs.rackspace.com.
       Work with the Cloud Doc Tools team to find out what to put here. Once established, you should not change these
       values without first consulting with the CDT team.
    -->
    <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
      <raxm:displayname>API Developer Guide</raxm:displayname>
      <raxm:product version="v1.0">cdn</raxm:product>
      <raxm:priority>20</raxm:priority>
    </raxm:metadata>
  </info>
  <!--  <preface xml:id="preface">
    <title>Preface</title>
    <para></para>
    <section xml:id="section_eow_tmw_ad">
      <title>Intended Audience</title>
      <para>This document is intended for technical writers and
        developers who are learning to write DocBook documents. We
        assume you have the following skills:</para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>Basic technical writing concepts</para>
        </listitem>
        <listitem>
          <para>Basic XML </para>
        </listitem>
      </itemizedlist>
      <para></para>
      <para> </para>
    </section>
    <section xml:id="change_history">
      <title>Document Change History</title>
      <para>This section is generated dynamically from the
          <tag>revhistory</tag> element in <tag>book/info</tag>. The
        processing instruction <code>&lt;?rax revhistory?></code> is
        replaced at build-time with a formatted version of the
          <tag>revhistory</tag> section.</para>
      <para>
        <?rax revhistory?>
      </para>
    </section>
  </preface>  -->
  <chapter xml:id="Overview">
    <title>Overview</title>
    <!--You can use the <?dbhtml stop-chunking?> processing instruction to prevent a chapter or section for chunking further in the html output. -->
    <remark>From http://docs.cloudcdn.apiary.io/ All deleted per Megan's edits.</remark>
    <remark>From https://one.rackspace.com/display/atlanta/Rackspace+CDN+Engineering</remark>
    <para>A content delivery network (CDN) is designed to improve the performance of publicly
      distributed assets.  Assets can be anything from website content, to web application
      components, to media like videos, ads, and interactive experiences.  CDNs decrease the load
      time of these assets by caching them on edge nodes, which are also called edge servers or
      point of presence (PoP) servers.  Edge nodes are distributed around the globe, and they cache
      content and serve it directly to customers, thus reducing transit time to a customer's
      location. </para>
    <para>Rackspace CDN gives you the power to accelerate content on any public resource at
      Rackspace. It provides a simple API and Control Panel experience for you to manage your
      CDN-enabled domains and the origins and assets associated with those domains. </para>
    <para>The Rackspace CDN architecture includes the following components:</para>
    <itemizedlist>
      <listitem>
        <para>A RESTful API</para>
      </listitem>
      <listitem>
        <para>The ability to cache publicly accessible resources hosted on a Cloud Server instance,
          or a public Cloud Files container</para>
      </listitem>
      <listitem>
        <para>A single global endpoint to access the API</para>
      </listitem>
      <listitem>
        <para>Use of the Akamai Technologies content delivery network, which is one of the world's
          largest distributed computing platforms </para>
      </listitem>
    </itemizedlist>
    <para>In addition to this guide, you will find the <citetitle>Rackspace CDN Getting Started
        Guide</citetitle>, which explains how to start using the API, at <link
        xlink:href="http://docs.rackspace.com/" xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml">http://docs.rackspace.com/</link>. </para>
    <section xml:id="Intended_Audience-d1e166">
      <title>Intended audience</title>
      <para>This document is intended for software developers who want to develop applications that
        use the Rackspace CDN API. You should be familiar with the following technologies:</para>
      <itemizedlist>
        <listitem>
          <para>RESTful web services</para>
        </listitem>
        <listitem>
          <para>HTTP/1.1 conventions</para>
        </listitem>
        <listitem>
          <para>JSON data serialization formats</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="Document_Change_History-d1e166">
      <title>Document change history</title>
      <para>This version of the guide replaces and obsoletes all earlier versions. The most recent
        changes are described in the following table:</para>
      <?rax revhistory?>
    </section>
    <section xml:id="Additional_Resources-d1e532">
      <title>Additional resources</title>
      <!--
      <para>Descriptive information about Rackspace CDN is also
        published in its Web Application Description Language (WADL).
        You are welcome to read this information here:
        <link xlink:href="http://docs.rackspace.com/cdn/api/v1.0/cdn.wadl">http://docs.rackspace.com/cdn/api/v1.0/cdn.wadl
        </link></para>
        -->
      <para>You can download the most current versions of the Rackspace API-related documents from
          <link xlink:href="http://docs.rackspace.com/">docs.rackspace.com</link>.</para>
      <!--
      <para> For more details about Rackspace CDN, refer to ??? (link
        to www.rackspace.com/cloud/cdn???) . This site also offers
        links to the Rackspace official support channels, including
        knowledge base articles, forums, phone, chat, and
        email.</para>
        -->
      <!--<para>See the
        <citetitle>Rackspace CDN Getting Started Guide</citetitle> at <link xlink:href="http://docs.rackspace.com/">docs.rackspace.com</link>
        for information about getting started using the API.</para> -->
      <para>During Early Access, email all support questions to <link
          xlink:href="mailto:cdn@rackspacecloud.com">cdn@rackspace.com</link>. </para>
      <para>Visit our <link xlink:href="http://feedback.rackspace.com">Product Feedback Forum</link>
        and tell us what you think about Rackspace CDN.</para>
      <para>You can follow Rackspace updates and announcements via <link
          xlink:href="http://www.twitter.com/rackspace">Twitter</link>. </para>
      <para>This API uses standard HTTP 1.1 status codes as documented in <link
          xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code
          Definitions</link>. (See also <xref linkend="responseCodes-d101e"/>.)</para>
    </section>
    <section xml:id="API_Contract_Changes-d1e363">
      <title>API contract changes</title>
      <para>The API contract is not locked and might change during the Early Access program.</para>
      <para>When and if the contract changes. Rackspace will notify customers in Release Notes. </para>
    </section>
    <section xml:id="Pricing_SLA-d1e1362">
      <title>Pricing and service level</title>
      <para>During Early Access, there is no charge for Rackspace CDN. </para>
      <!--      <para>When Rackspace CDN moves to Unlimited Availability, customers will be billed for outbound
        bandwidth.</para> -->
      <para>While Rackspace CDN is in Early Access, it is subject to the Rackspace test terms at
          <link xlink:href="http://www.rackspace.com/information/legal/testterms">Legal Information
          - Test Terms</link>. When Rackspace CDN moves to Unlimited Availability, a service level
        agreement (SLA) will be available.</para>
    </section>
  </chapter>
  <chapter xml:id="concepts-d1eo1">
    <title>Concepts and terminology</title>
    <para>To use the Rackspace CDN API effectively, you should understand several key
      concepts.</para>
    <section xml:id="CDN-d1eo1">
      <title>Content delivery network</title>
      <para>A content delivery network (CDN) is a system of multiple computers that contains copies
        of data stored at various network nodes. A CDN is designed to improve performance of
        publicly distributed assets. Assets can be anything from website content, to web application
        components, to media such as videos, ads, and interactive experiences.  CDNs decrease the
        load time of these assets by caching them on edge nodes, also called edge servers or point
        of presence (PoPs) servers.  Edge nodes are distributed around the globe, so requests travel
        to a local location to get assets rather than to and from a data center based far from the
        end user. </para>
    </section>
    <section xml:id="pointOfPresence-d1eo1">
      <title>Point of presence</title>
      <para>A point of presence (PoP) is the point at which two or more different networks or
        communication devices build a connection with each other. PoP mainly refers to an access
        point, location, or facility that connects to and helps other devices establish a connection
        with the Internet. </para>
    </section>
    <section xml:id="edgeNode-d1eo1">
      <title>Edge node</title>
      <para>CDN providers have many points of presence (PoP) servers around the world. These servers
        are known as edge nodes. These edge nodes cache the content and serve it directly to
        customers, thus reducing transit time to a customer's location.</para>
    </section>
    <section xml:id="edgeServer-d1eo1">
      <title>Edge server</title>
      <para>An edge server is the same as an edge node. </para>
    </section>
    <section xml:id="domain-d1eo1">
      <title>Domain</title>
      <para>A domain represents the domain name through which visitors retrieve content. The
        underlying site might be served through a CDN. A service can have multiple domains. The CDN
        provider provides users with a Canonical Name (CName) to specify for their domain name as an
        alias.</para>
    </section>
    <section xml:id="Origin-d1eo1">
      <title>Origin</title>
      <para>An origin is an address (IP or domain) from which the CDN provider pulls content. A
        service can have multiple origins.</para>
    </section>
    <section xml:id="flavor-d1eo1">
      <title>Flavor</title>
      <para>A flavor is a mapping configuration to a CDN provider that enables you to decide which
        CDN features that you want your service to use. In the request and response examples for
        Rackspace CDN, the flavor is referred to with the <code>flavor_id</code> parameter. For this
        release of Rackspace CDN, the <code>flavor_id</code> value is <code>cdn</code>. The
          <code>cdn</code> flavor enables your service content to be delivered across the network
        using the Rackspace CDN partner, Akamai. In the future, Rackspace might offer other
        flavors.</para>
    </section>
    <section xml:id="service-d1eo1">
      <title>Service</title>
      <para>A service represents an application that has its content cached to the edge
        nodes.</para>
    </section>
    <section xml:id="status-d1eo1">
      <title>Status</title>
      <para>The status indicates the current state of a service. The time it takes for a service
        configuration to be distributed to a CDN provider cache can vary. </para>
    </section>
    <section xml:id="purge-d1eo1">
      <title>Purge</title>
      <para>Purging removes content from the edge nodes thus invalidating the content so that the
        content can be refreshed from your origin servers.</para>
    </section>
    <section xml:id="cachingRule-d1eo1">
      <title>Caching rule</title>
      <para>A caching rule provides you with fine-grained control over the time-to-live (TTL) of an
        object. When the TTL expires for an object, the edge node pulls the object from the origin
        again.</para>
    </section>
    <section xml:id="restriction-d1eo1">
      <title>Restriction</title>
      <para>A restriction enables you to define rules about who can or cannot access content from
        the cache. Examples of a restriction are allowing requests only from certain domains,
        geographies, or IP addresses.</para>
    </section>
  </chapter>
  <chapter xml:id="generalAPIInfo-d1eo1">
    <title>General API information</title>
    <para xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml">The
      Rackspace CDN API is implemented using a RESTful web service interface. Like other Rackspace
      services, Rackspace CDN shares a common token-based authentication system that allows seamless
      access between products and services.</para>
    <note xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml">
      <para>All requests to authenticate against and operate the service are performed using SSL
        over HTTP (HTTPS) on TCP port 443.</para>
    </note>
    <section xml:id="Authentication-d1e639" xmlns:m="http://www.w3.org/the key 1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
      <title>Authentication</title>
      <para xmlns:m="http://www.w3.org/1998/Math/MathML"> Every REST request against the Rackspace
        CDN service requires the inclusion of a specific authentication token, supplied by the
          <code>X-Auth-Token</code> HTTP header. You obtain this token by using the Rackspace Cloud
        Identity service and supplying a valid username and API access key. </para>
      <section xml:id="Geographic_Endpoints" xmlns:m="http://www.w3.org/1998/Math/MathML">
        <title>Geographic endpoints</title>
        <para>The Rackspace Cloud Identity service serves as the entry point to all Rackspace Cloud
          APIs and is itself a RESTful web service. </para>
        <para>Use the following endpoint to access the Cloud Identity Service, regardless of US or
          UK identities:<itemizedlist>
            <listitem>
              <para><code>https://identity.api.rackspacecloud.com/v2.0</code></para>
            </listitem>
          </itemizedlist>
        </para>
        <para>Your account might be based in either the US or the UK. This is not determined by your
          physical location but by the location of the Rackspace retail site which was used to
          create your account:<itemizedlist>
            <listitem>
              <para>If your account was created via <link xlink:href="http://www.rackspacecloud.com"
                  >http://www.rackspacecloud.com</link>, it is a US-based account.</para>
            </listitem>
            <listitem>
              <para>If your account was created via <link xlink:href="http://www.rackspace.co.uk"
                  >http://www.rackspace.co.uk</link>, it is a UK-based account. </para>
            </listitem>
          </itemizedlist></para>
        <para>Note that the <code>v2.0</code> component in the URL indicates that you are using
          version 2.0 of the Cloud Identity API.</para>
      </section>
      <section xml:id="Retrieving_Auth_Token" xmlns:m="http://www.w3.org/1998/Math/MathML">
        <title>Retrieving the authentication token</title>
        <informaltable rules="all">
          <tbody>
            <tr>
              <td colspan="1">&POST; </td>
              <td colspan="1"> v2.0/tokens </td>
              <td colspan="4"> Authenticate to receive a token and a service catalog. </td>
            </tr>
          </tbody>
        </informaltable>
        <simpara> Normal response codes: <returnvalue>200</returnvalue>,
            <returnvalue>203</returnvalue>
        </simpara>
        <simpara> Error status codes: unauthorized (<errorcode>401</errorcode>), userDisabled
            (<errorcode>403</errorcode>), badRequest (<errorcode>400</errorcode>), authFault
            (<errorcode>500</errorcode>), serviceUnavailable (<errorcode>503</errorcode>) </simpara>
        <para> The authenticate operation provides clients with an authentication token and a list
          of regional cloud endpoints. </para>
        <para>The example requests and responses in this section illustrate a general case. In your
          authentication request, use your own credentials rather than the example values shown here
          for <code>username</code> and <code>apiKey</code>. When you authenticate successfully, the
          response to your authentication request will include a catalog of the services to which
          you have subscribed rather than the example values shown here.</para>
        <note><title>Notes</title>
          <itemizedlist>
            <listitem>
              <para>For more information about how to use cURL to retrieve the authentication token, see
                the <citetitle>Rackspace CDN Getting Started Guide</citetitle>.</para>
            </listitem>
            <listitem>
              <para> If you authenticate with username and password credentials, you can set up
                multi-factor authentication to add an additional level of security to your account.
                This feature is not available for username and API credentials. For information
                about setting up and using multi-factor authentication, see <link
                  xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/MFA_Ops.html"
                  >Multi-factor authentication</link> in the <citetitle>Cloud Identity Client
                  Developer Guide</citetitle>. </para>
            </listitem>
          </itemizedlist>
        </note>
        <example>
          <title>Authentication with US endpoint: XML request</title>
          <programlistingco>
            <areaspec>
              <area xml:id="credentials.xml.user" units="linecolumn" coords="12 35"/>
              <area xml:id="credentials.xml.key" units="linecolumn" coords="13 35"/>
            </areaspec>
            <programlisting language="xml"><xi:include href="samples/credentials-20.xml" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <example>
          <title>Authentication with US endpoint: JSON request</title>
          <programlistingco>
            <areaspec>
              <area xml:id="credentials.json.user" units="linecolumn" coords="13 40"/>
              <area xml:id="credentials.json.key" units="linecolumn" coords="14 38"/>
            </areaspec>
            <programlisting language="json"><xi:include href="samples/credentials-20.json" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <calloutlist>
          <callout arearefs="credentials.xml.user">
            <para>The username is your common Rackspace Cloud username. </para>
          </callout>
          <callout arearefs="credentials.xml.key">
            <para>The key is your API access key. </para>
            <para><emphasis role="bold">To find your API key</emphasis>
            </para>
            <orderedlist>
              <listitem>
                <para>Log in to the Cloud Control Panel (<link
                    xlink:href="https://mycloud.rackspace.com"
                  >https://mycloud.rackspace.com</link>).</para>
              </listitem>
              <listitem>
                <para>On the upper-right side of the top navigation pane, click your
                  username.</para>
              </listitem>
              <listitem>
                <para>From the menu, select <guilabel>Account Settings</guilabel>.</para>
              </listitem>
              <listitem>
                <para>In the Login Details section of the Account Settings page, locate the
                    <guilabel>API key</guilabel> field and click <guibutton>Show</guibutton>.</para>
              </listitem>
              <listitem>
                <para>Copy the value of the API key and paste it into a text editor of your
                  choice.</para>
              </listitem>
              <listitem>
                <para>Click <guibutton>Hide</guibutton> to hide the value of the API key.</para>
              </listitem>
            </orderedlist>
            <para>You also need your cloud account ID number. In the documentation, the account ID
              is often referred to as your tenant name or tenant ID (technically, the ID is
              different from the name, but at Rackspace, they are the same thing). Together, three
              components—your username, your API key, and your tenant ID or cloud account ID—form
              the authentication credentials that are required to connect to the Rackspace
              cloud.</para>
            <para>To find your tenant ID or cloud account number, click your username on the
              upper-right side of the top navigation pane in the Cloud Control Panel. The tenant ID
              or account ID number is listed first in the menu.</para>
          </callout>
        </calloutlist>
        <remark>Update responses to include Rackspace CDN in the service catalog.</remark>
        <example>
          <title>Authentication with US endpoint: XML response</title>
          <programlistingco>
            <areaspec>
              <area xml:id="response.xml.namespaces" units="linecolumn" coords="7 9"/>
              <area xml:id="response.xml.token" units="linecolumn" coords="15 10"/>
              <area xml:id="response.xml.dfltregion" units="linecolumn" coords="16 67"/>
              <area xml:id="response.xml.role" units="linecolumn" coords="17 12"/>
              <area xml:id="response.xml.catalog" units="linecolumn" coords="22 21"/>
              <area xml:id="response.xml.servicetype" units="linecolumn" coords="51 34"/>
              <area xml:id="response.xml.servicename" units="linecolumn" coords="51 54"/>
              <area xml:id="response.xml.region" units="linecolumn" coords="52 30"/>
              <area xml:id="response.xml.tenant" units="linecolumn" coords="53 66"/>
              <area xml:id="response.xml.url" units="linecolumn" coords="54 9"/>
            </areaspec>
            <programlisting language="xml"><xi:include href="samples/auth-20.xml" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <example xml:id="auth-response-example-json">
          <title>Authentication with US endpoint: JSON response</title>
          <programlistingco>
            <areaspec>
              <area xml:id="response.json.namespaces" units="linecolumn" coords="200 1"/>
              <area xml:id="response.json.token" units="linecolumn" coords="9 8"/>
              <area xml:id="response.json.dfltregion" units="linecolumn" coords="16 45"/>
              <area xml:id="response.json.role" units="linecolumn" coords="17 12"/>
              <area xml:id="response.json.catalog" units="linecolumn" coords="30 8"/>
              <area xml:id="response.json.servicetype" units="linecolumn" coords="189 11"/>
              <area xml:id="response.json.servicename" units="linecolumn" coords="188 11"/>
              <area xml:id="response.json.region" units="linecolumn" coords="102 24"/>
              <area xml:id="response.json.tenant" units="linecolumn" coords="103 24"/>
              <area xml:id="response.json.url" units="linecolumn" coords="101 24"/>
            </areaspec>
            <programlisting language="json"><xi:include href="samples/auth-20.json" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <note>
          <para>The information shown in the authentication response examples is for US-based
            accounts. If you authenticate against the UK endpoint, you see the service catalog
            information for UK-based accounts.</para>
        </note>
        <calloutlist>
          <callout arearefs="response.xml.namespaces">
            <para> In XML responses only, a list of namespaces identifies API extensions that add
              functionality to the core API. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.token">
            <para>The token can be presented to a service as evidence of authentication. Tokens are
              valid for a finite duration. An authentication token's default lifespan is 24 hours.
              Applications should be designed to re-authenticate after receiving a 401
              (Unauthorized) response from a service endpoint. </para>
            <para> The token's <code>expires</code> attribute denotes the time after which the token
              automatically becomes invalid. A token can be manually revoked before the time
              identified by the <code>expires</code> attribute. The attribute predicts a token's
              maximum possible lifespan but does not guarantee that it will reach that lifespan.
              Clients are encouraged to cache a token until it expires. </para>
            <note>
              <para>The token's expiration time is formatted differently in the US and UK. These
                response examples show the US format. For examples of the UK format, see <link
                  xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_authenticate_v2.0_tokens_Token_Calls.html#POST_authenticate_v2.0_tokens_Token_Calls-Response"
                  >the authentication response examples in the Cloud Identity Developer Guide</link>.</para>
            </note>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.dfltregion">
            <para>Users can be assigned a default region. If multiple endpoints are associated with
              a service in the user's catalog, the endpoint for the user's default region is
              selected if it is available. In this example, the user's default region is DFW, and
              several of the services in the catalog are associated with endpoints in that region.
              Whenever possible, the user's work is directed to the DFW region. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.role">
            <para>Users can be assigned multiple roles, with each role providing specific
              privileges. In this example, <code>yourUserName</code> is the administrative user for
              the account and holds the fully-privileged <code>identity:admin</code> role. Other
              users might hold other roles with different privileges. Roles do not have to be
              associated with actual job functions such as Administrator, Operator, Developer,
              Tester, or Trainer. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.catalog">
            <para> The service catalog lists the services that you can access. In this example, the
              user can access one database service, one load-balancing service, two compute services
              (Cloud Servers OpenStack and Cloud Servers), two object storage services (Cloud Files
              CDN and Cloud Files), one DNS service, and one Rackspace CDN service. The catalog
              entry for each service provides at least one endpoint URI for that service. Other
              information, such as regions, versions, and tenants, is provided if it is relevant to
              a user's access to a service. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.servicetype">
            <para> The service <code>type</code> attribute identifies services that perform similar
              functions, regardless of service names. In this example, the service named
                <code>cloudFiles</code> is identified as <code>type="object-store"</code>. </para>
            <tip>
              <para>Beginning with Cloud Identity v2.0, the service catalog includes the service
                  <code>type</code> attribute to identify services that perform similar functions
                but have different names. For example, <code>type="compute"</code> identifies
                compute services such as cloudServers and cloudServersOpenStack. Some developers
                have found the service <code>type</code> attribute to be useful in parsing the
                service catalog. For additional information about the Cloud Identity service, see
                the <citetitle>Cloud Identity Client Developer Guide</citetitle> at <link
                  xlink:href="http://docs.rackspace.com">http://docs.rackspace.com/</link>.</para>
            </tip>
            <important>
              <para>Use the service <code>type</code> attribute as the primary value for locating a
                service. If multiple endpoints of the same service type exist in the same region,
                use the service <code>name</code> attribute to locate the appropriate
                service.</para>
            </important>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.servicename">
            <para> The service <code>name</code> attribute identifies each unique service in the
              catalog. After a service is created, its name does not change. However, new services
              of the same service <code>type</code> can be added to the catalog with new names. </para>
            <important>
              <para> If you are programmatically parsing an authentication response, use service
                  <code>type</code> rather than service <code>name</code> to determine whether a
                user has access to a particular kind of service. Service type is stable across all
                releases. New service types might be developed, but existing service types are not
                renamed. In this example, <code>type="compute"</code> identifies all the available
                compute services. If new compute services are added in future releases, you can
                recognize them by parsing for <code>type="compute"</code> in the authentication
                response's service catalog.</para>
            </important>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.region">
            <para> A service might expose endpoints in different regions. Regional endpoints enable
              users to provision resources in a manner that provides high availability. </para>
            <para> Some services, such as Rackspace CDN, are not region-specific. These services
              supply a single endpoint and do not provide access to internal URIs. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.tenant">
            <para> Some services recognize specification of a tenant. If a service recognizes
              tenants, the format of the tenant specification is defined only by the service. For
              details about whether and how to specify a tenant, check the documentation for the
              service that you are using.</para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.url">
            <para> An endpoint can be assigned public and internal URIs. A public URI is accessible
              from anywhere. Access to a public URI usually incurs traffic charges. Internal URIs
              are accessible only to services within the same region. Access to an internal URI is
              free of charge. </para>
            <para> </para>
          </callout>
        </calloutlist>
        <para>Rackspace CDN service endpoints are published in the service catalog in the
          authentication response with the account information, which is a required element of the
          service endpoints. For more information about service endpoints, see <xref
            linkend="serviceEndpoints"/>. </para>
      </section>
    </section>

    <section xml:id="RBAC" xmlns:wadl="http://wadl.dev.java.net/2009/02"
      xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml">
      <title>Role Based Access Control</title>
      <para>Role Based Access Control (RBAC) restricts access to the capabilities of Rackspace Cloud
        services, including the Rackspace CDN API, to authorized users only. RBAC enables Rackspace
        Cloud customers to specify which account users of their Cloud account have access to which
        Rackspace CDN API service capabilities, based on roles defined by Rackspace (see <xref
          linkend="RBAC_product_roles_table"/>). The permissions to perform certain operations in
        the Rackspace CDN API – create, read, update, delete – are assigned to specific roles. The
        Cloud account owner user assigns these roles, either global (multiproduct) or
        product-specific, to account users. </para>
      <para>For more information about RBAC, see the <link
          xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Role_Based_Access_Control-d1e808.html"
          >RBAC</link> section in the <citetitle>Cloud Identity Client Developer
        Guide</citetitle>.</para>
      <section xml:id="assigningRoles">
        <title>Assigning roles to account users</title>
        <para>The account owner (identity:user-admin) can create account users on the account and
          then assign roles to those users. The roles grant the account users specific permissions
          for accessing the capabilities of the Rackspace CDN service. Each account has only one
          account owner, and that role is assigned by default to any Rackspace Cloud account when
          the account is created.</para>
        <para>For information about how to perform the following tasks, see the <citetitle>Cloud
            Identity Client Developer Guide</citetitle>:</para>
        <itemizedlist spacing="compact">
          <listitem>
            <para><link
                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_addUser__v2.0_users_User_Calls.html"
                >Create account users</link></para>
          </listitem>
          <listitem>
            <para><link
                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/PUT_addUserRole__v2.0_users__userId__roles_OS-KSADM__roleid__Role_Calls.html"
                >Assign roles to account users</link></para>
          </listitem>
          <listitem>
            <para><link
                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/DELETE_deleteUserRole__v2.0_users__userId__roles_OS-KSADM__roleid__Role_Calls.html"
                >Delete roles from account users</link></para>
          </listitem>
        </itemizedlist>
        <note>
          <para>The account owner (identity:user-admin) role cannot hold any additional roles
            because it already has full access to all capabilities.</para>
        </note>
      </section>
      <section xml:id="rolesAvailable">
        <title>Roles available for Rackspace CDN </title>
        <para>Three roles (admin, creator, and observer) can be used to access the Rackspace CDN API
          specifically. The following table describes these roles and their permissions. </para>
        <table rules="all" xml:id="RBAC_product_roles_table">
          <caption>Rackspace CDN product roles and permissions</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Role name</th>
              <th>Role permissions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>cdn:admin</td>
              <td>This role provides Create, Read, Update, and Delete permissions in Rackspace CDN,
                where access is granted.</td>
            </tr>
            <tr>
              <td>cdn:creator</td>
              <td>This role provides Create, Read, and Update permissions in Rackspace CDN, where
                access is granted.</td>
            </tr>
            <tr>
              <td>cdn:observer</td>
              <td>This role provides Read permission in Rackspace CDN, where access is granted.</td>
            </tr>
          </tbody>
        </table>
        <para>Additionally, two multiproduct roles apply to all products. Users with multiproduct
          roles inherit access to future products when those products become RBAC-enabled. The
          following table describes these roles and their permissions.</para>
        <table rules="all" width="100%" xml:id="RBAC_global_roles_table_3">
          <caption> Multiproduct (global) roles and permissions</caption>
          <thead>
            <tr>
              <td colspan="1">Role name</td>
              <td colspan="2">Role permissions</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colspan="1">admin</td>
              <td colspan="2">This role provides Create, Read, Update, and Delete permissions in all
                products, where access is granted.</td>
            </tr>
            <tr>
              <td colspan="1">observer</td>
              <td colspan="2">This role provides Read permission in all products, where access is
                granted.</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section version="5.0" xml:id="RBAC_Role_Conflict_3">
        <title>Resolving conflicts between RBAC multiproduct and custom (product-specific)
          roles</title>
        <para>The account owner can set roles for both multiproduct and Rackspace CDN scope, and it
          is important to understand how any potential conflicts among these roles are resolved.
          When two roles appear to conflict, the role that provides the more extensive permissions
          takes precedence. Therefore, admin roles take precedence over observer and creator roles,
          because admin roles provide more permissions. </para>
        <para>The following table shows two examples of how potential conflicts between user roles
          in the Control Panel are resolved: </para>
        <para>
          <informaltable rules="all">
            <thead>
              <tr align="center">
                <td>Permission configuration</td>
                <td>View of permission in the Control Panel </td>
                <td>Can the user perform product admin functions in the Control Panel?</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>User is assigned the following roles: multiproduct <emphasis role="bold"
                    >observer</emphasis> and Rackspace CDN <emphasis role="bold"
                  >admin</emphasis></td>
                <td>Appears that the user has only the multiproduct <emphasis role="bold"
                    >observer</emphasis> role</td>
                <td>Yes, for Rackspace CDN only. The user has the <emphasis role="bold"
                    >observer</emphasis> role for the rest of the products.</td>
              </tr>
              <tr>
                <td>User is assigned the following roles: multiproduct <emphasis role="bold"
                    >admin</emphasis> and Rackspace CDN <emphasis role="bold"
                  >observer</emphasis></td>
                <td>Appears that the user has only the multiproduct <emphasis role="bold"
                    >admin</emphasis> role</td>
                <td>Yes, for all of the products. The Rackspace CDN <emphasis role="bold"
                    >observer</emphasis> role is ignored.</td>
              </tr>
            </tbody>
          </informaltable>
        </para>
      </section>
      <section version="5.0" xml:id="RBAC_API_XREF_3">
        <title>RBAC permissions cross-reference to Rackspace CDN API operations</title>
        <remark>Make sure the Rackspace CDN is added to the KC article. Renee Rendon is the
          responsible writer for that.</remark>
        <para>API operations for Rackspace CDN might not be available to all roles. To see which
          operations are permitted to invoke which calls, see the <link
            xlink:href="http://www.rackspace.com/knowledge_center/article/permissions-matrix-for-role-based-access-control-rbac"
            >Permissions Matrix</link> article in the Rackspace Knowledge Center.</para>
      </section>
    </section>
    <section xml:id="serviceEndpoints" xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
      <title>Service access endpoint</title>
      <para>Rackspace CDN has a global endpoint. Data is replicated to all data centers. The global
        endpoint is as follows:</para>
      <programlisting>https://global.cdn.api.rackspacecloud.com/v1.0/<parameter>123456</parameter></programlisting>
      <para>Replace the example account ID number, <parameter>123456</parameter>, with your actual
        account ID returned as part of the authentication service response.</para>
      <para>Your account ID is located after the final slash (/) in the <code>publicURL</code> field
        returned by the authentication response. For example, in <xref
          linkend="auth-response-example-json"/> the <code>publicURL</code> field for
          <code>rackCDN</code> is <code>https://global.cdn.api.rackspacecloud.com/v1.0/110011</code>
        and the account ID is <emphasis role="bold">110011</emphasis>. </para>
      <note>
        <para>The account ID from Cloud Identity is the same as the project ID given in the
            <code>X-Project-Id</code> header in Rackspace CDN. (You might also see the account ID or
          project ID referred to as the tenant ID.)</para>
      </note>
      <!--      <remark> I am hiding information. It it was the previous version of this info prior to the info above based on how repose handles this in Rackspace CDN. </remark>
      <para>The service catalog returned in the authentication response (<xref
          linkend="auth-response-example-json"/>) specifies the correct service access endpoint for
        your account to use to access Rackspace CDN. You can copy the endpoint directly from the
        service catalog rather than trying to construct it manually.</para>
      <para>Rackspace Cloud Identity returns an endpoint with your account ID. Note the following
        information about account ID:</para>
      <itemizedlist>
        <listitem>
          <para>Account ID refers to your Rackspace account number. (You can also find your account
            number in the Cloud Control Panel at <link xlink:href="https://mycloud.rackspace.com/"
              >mycloud.rackspace.com</link>.)</para>
        </listitem>
        <listitem>
          <para>Account ID from Cloud Identity is the same as the project ID given in the
              <code>X-Project-Id</code> header in Rackspace CDN. (You might also see account ID or
            project ID referred to as tenant ID.)</para>
        </listitem>
        <listitem>
          <para>You do not have to provide the account ID in the service access endpoint for the
            Rackspace CDN API if you have the <code>X-Project-Id</code> header set. (With the
              <code>X-Project-Id</code> header set, the Rackspace CDN API works with or without the
            account ID specified in the service access endpoint.) </para>
        </listitem>
        <listitem>
          <para>Without the <code>X-Project-Id</code> header, you receive an auth error if the
            account ID is not in the service access endpoint URL. </para>
        </listitem>
        <listitem>
          <para>If the account ID is in the URL, the Rackspace CDN API will use that ID in place of
            the <code>X-Project-Id</code> header.</para>
        </listitem>
      </itemizedlist> -->
    </section>
    <section xml:id="contractVersion" xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
      <title>Rackspace CDN contract version</title>
      <para> The Rackspace CDN version defines the contract and build information for the API. </para>
      <para> The contract version denotes the data model and behavior that the API supports. The
        requested contract version is included in all request URLs. Different contract versions of
        the API might be available at any given time and are not guaranteed to be compatible with
        one another. </para>
      <example>
        <title>Example request URL (contract version in <emphasis role="strong"
          >bold</emphasis>)</title>
        <programlisting>https://global.cdn.api.rackspacecloud.com/<emphasis role="bold">v1.0</emphasis>/<parameter>123456</parameter></programlisting>
      </example>
      <note>
        <para>This document pertains to contract version 1.0.</para>
      </note>
    </section>
    <section xml:id="Request_Response_Types-d1e903" xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
      <title>Request and response types</title>
      <para>The Rackspace CDN API supports JSON data serialization formats. </para>
      <para>Specify the request format by using the <code>Content-Type</code> header, which is
          <emphasis role="italic">required</emphasis> for operations that have a request body. </para>
      <para>You can specify the response format in requests by using the <code>Accept</code> header
        or by adding a <code>.json</code> extension to the request URI. If no response format is
        specified, JSON is the default. </para>
      <table rules="all">
        <caption>Response format</caption>
        <?dbfo keep-together="always"?>
        <thead>
          <tr align="center">
            <td>Format</td>
            <td>Accept header</td>
            <td>Query extension</td>
            <td>Default</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>JSON</td>
            <td>application/json</td>
            <td>.json</td>
            <td>Yes</td>
          </tr>
        </tbody>
      </table>
    </section>
<!--
    <remark>No rate limits for EA - only the 1 absolute limit. </remark>  
    <section xml:id="Limits-d1e1397" xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
      <title>Limits</title>
      <remark>Are there any limits that should be documented?</remark>
      <para>All accounts are configured with default thresholds, or limits, that manage capacity and
        prevent abuse of the system. </para>
      <para>The system recognizes the following types of limits, which are described in this
        section: </para>
      <itemizedlist>
        <listitem>
          <para>Rate limits</para>
        </listitem>
        <listitem>
          <para>Absolute limits</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>If the default limits are too low for your particular application, contact Rackspace
          Cloud support to request an increase. All requests require reasonable
          justification.</para>
      </note>
      <section xml:id="Rate-Limits-d1e003">
        <title>Rate limits</title>
        <remark>Are there any rate limits that should be documented?  (Megan added "invalidation vs
          delete purges" in her review of this section)</remark>
        <para>Rate limits control the frequency at which the user can issue specific API
          requests.</para>
        <para>For Rackspace CDN, the following rate limit apply: </para>
        <para>?????</para>
        <para>Rate limits are reset after a certain amount of time passes. </para>
      </section>
-->      
      <section xml:id="Absolute-Limits-d1e003">
        <title>Absolute limits</title>
        <remark>Are there any absolute limits that should be documented?</remark>
        <para>The following table provides details about the absolute limits for the Rackspace CDN
          API.</para>
        <table rules="all">
          <caption>Absolute limits</caption>
          <col width="30%"/>
          <col width="40%"/>
          <col width="30%"/>
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Limit</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Client maximum body size restriction</td>
              <td>Maximum size of request body. Exceeding the limit results in a 413 (<code>Request
                  Entity Too Large</code>) error.</td>
              <td>8 KB</td>
            </tr>
          </tbody>
        </table>
      </section> 
    <section xml:id="commonHeaders">
      <title>Common headers</title>
      <para>The following table describes the common headers used by the API.</para>
      <table rules="all">
        <caption>Common headers</caption>
        <col width="30%"/>
        <col width="70%"/>
        <thead>
          <tr>
            <th>Header</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>X-Auth-Token</td>
            <td>Authentication token. Required.</td>
          </tr>
          <tr>
            <td>X-Project-Id</td>
            <td>A unique ID for the user to which the value of <code>X-Auth-Token</code> grants
              access. The unique ID is your account ID.</td>
          </tr>
          <tr>
            <td>Accept</td>
            <td>Media type. Initially, only <code>application/json</code> is supported. </td>
          </tr>
          <tr>
            <td>Accept-Encoding</td>
            <td>Specifies that the agent accepts gzip-encoded response bodies</td>
          </tr>
          <tr>
            <td>Client-ID</td>
            <td>A unique ID for each client instance. The <code>Client-ID</code> is used to avoid
              echoing a sender's messages back to the same instance, and it can be logged by the
              server for future use. The client generates the Client-ID once, and it persists
              between restarts of the client. The client should reuse the same
                <code>Client-ID</code>. <emphasis role="bold">Note</emphasis>: All message-related
              operations require that <code>Client-ID</code> is included in the headers to ensure
              that messages are not echoed back to the client that posted them, unless the client
              explicitly requests this.</td>
          </tr>
          <tr>
            <td>Content-Length</td>
            <td>For <command>POST</command> or <command>PUT</command> requests, the length in bytes
              of the message document being submitted</td>
          </tr>
          <tr>
            <td>Content-Type</td>
            <td><code>application/json</code>
            </td>
          </tr>
          <tr>
            <td>Date</td>
            <td>Current date and time</td>
          </tr>
          <tr>
            <td>Host</td>
            <td>Host name of the API</td>
          </tr>
        </tbody>
      </table>
    </section>
    <section xml:id="datetimeformat">
      <title>Date and time format</title>
      <para>The Rackspace CDN service uses an ISO-8601 compliant date format for the display and
        consumption of date/time values. </para>
      <example>
        <title>Service date/time format</title>
        <programlisting>yyyy-MM-dd'T'HH:mm:ss.SSSZ</programlisting>
        <para>September 19th, 2014 at 8:07:08 AM, GMT-5 would have the following format:</para>
        <programlisting>2014-09-19T08:07:08-05:00</programlisting>
      </example>
      <para>The following table describes the date and time format codes.</para>
      <table rules="all">
        <caption>Explanation of date/time format codes</caption>
        <thead>
          <tr>
            <td>Code</td>
            <td>Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>yyyy</td>
            <td>Four-digit year</td>
          </tr>
          <tr>
            <td>MM</td>
            <td>Two-digit month</td>
          </tr>
          <tr>
            <td>dd</td>
            <td>Two-digit day of the month</td>
          </tr>
          <tr>
            <td>T</td>
            <td>Separator for the date and time</td>
          </tr>
          <tr>
            <td>HH</td>
            <td>Two-digit hour of the day (00-23)</td>
          </tr>
          <tr>
            <td>mm</td>
            <td>Two-digit minutes of the hour</td>
          </tr>
          <tr>
            <td>ss</td>
            <td>Two-digit seconds of the minute</td>
          </tr>
          <tr>
            <td>SSS</td>
            <td>Three-digit milliseconds of the second</td>
          </tr>
          <tr>
            <td>Z</td>
            <td>RFC-822 timezone</td>
          </tr>
        </tbody>
      </table>
    </section>
    <section xml:id="pagination-dle101">
      <title>Pagination</title>
      <remark>???? Do we need a pagination section for Rackspace CDN?</remark>
      <para xmlns:wadl="http://wadl.dev.java.net/2009/02">Pagination provides the ability to limit
        the size of the returned data in the response body and to retrieve a specified subset of a
        large data set. Pagination has two key concepts: <emphasis>limit</emphasis> and
          <emphasis>marker</emphasis>. </para>
      <para xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <itemizedlist>
          <listitem>
            <para><code>limit</code> is the restriction on the maximum number of items that can be
              returned. </para>
          </listitem>
          <listitem>
            <para><code>marker</code> is the last item in the previous list returned. </para>
            <para>For example, a query could request the next 10 services after the service
                <code>xyz</code> as follows: <code>?limit=10&amp;marker=xyz</code>. </para>
          </listitem>
        </itemizedlist>
      </para>
      <para xmlns:wadl="http://wadl.dev.java.net/2009/02">Pagination applies only to the following
        operation: </para>
      <informaltable rules="all" xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/v1.0/services </td>
            <td colspan="3">Retrieves a list of all services.</td>
          </tr>
        </tbody>
      </informaltable>
      <para>For an example, see the <link
          xlink:href="http://docs.rackspace.com/cdn/api/v1.0/cdn-devguide/content/GET_getAllServices__services_servicesOperations.html"
          xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
          >"Retrieve all services" operation description</link>. </para>
    </section>
    <section xml:id="responseCodes-d101e">
      <title>Response codes</title>
      <para>Rackspace CDN returns an HTTP code that denotes the type of response. </para>
      <itemizedlist>
        <listitem>
          <para>Successful response codes are returned only if all configured providers were
            successful in processing the request.</para>
        </listitem>
        <listitem>
          <para>Error response codes are accompanied by an <code>application/json</code> response
            body that contains the error messages.</para>
        </listitem>
      </itemizedlist>
      <para>The following table lists possible responses with their associated codes and
        descriptions.</para>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="2">Response</td>
            <td colspan="1">Associated response code</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="2"><code>OK</code></td>
            <td colspan="1">200</td>
            <td colspan="3">The request has succeeded. (Some API calls might return 201
              instead.)</td>
          </tr>
          <tr>
            <td colspan="2"><code>Created</code></td>
            <td colspan="1">201</td>
            <td colspan="3">The request has been fulfilled and a resource was created.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Accepted</code></td>
            <td colspan="1">202</td>
            <td colspan="3">The request has been accepted for processing.</td>
          </tr>
          <tr>
            <td colspan="2"><code>No Content</code></td>
            <td colspan="1">204</td>
            <td colspan="3">The request has been fulfilled but does not return a representation
              (that is, the response is empty).</td>
          </tr>
          <tr>
            <td colspan="2"><code>Bad Request</code></td>
            <td colspan="1">400</td>
            <td colspan="3">The request was not understood or was missing required parameters. </td>
          </tr>
          <tr>
            <td colspan="2"><code>Unauthorized</code></td>
            <td colspan="1">401</td>
            <td colspan="3">Authentication failed, or the user does not have permissions for a
              requested operation.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Forbidden</code></td>
            <td colspan="1">403</td>
            <td colspan="3">The server understood the request but refused to fulfill it.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Not Found</code></td>
            <td colspan="1">404</td>
            <td colspan="3">A requested resource was not found.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Method Not Allowed</code></td>
            <td colspan="1">405</td>
            <td colspan="3">The request method is not supported for this resource.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Request Entity Too Large</code></td>
            <td colspan="1">413</td>
            <td colspan="3">The server is refusing to process a request because the request entity
              is larger than the server is willing or able to process. </td>
          </tr>
          <tr>
            <td colspan="2"><code>Too Many Requests</code></td>
            <td colspan="1">429</td>
            <td colspan="3">Too many requests have been sent in a given amount of time. Pause
              requests, wait up to one minute, and try again. (Intended for use with rate
              limiting.)</td>
          </tr>
          <tr>
            <td colspan="2"><code>Internal Server Error</code></td>
            <td colspan="1">500</td>
            <td colspan="3">The service encountered an unexpected condition that prevented it from
              fulfilling the request.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Service Unavailable</code></td>
            <td colspan="1">503</td>
            <td colspan="3">The service is temporarily unavailable (for example, for scheduled
              platform maintenance). Try again later.</td>
          </tr>
        </tbody>
      </informaltable>
      <para xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
        ><?rax-fo keep-with-next?> An example of an error message follows. </para>
      <example xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml">
        <title>Error message example</title>
        <programlisting>HTTP/1.1 400 Bad Request
Content-Type: application/json

{
    "message": {
        "errors": [
            {
                "message": "['domains']-[] is too short"
            }
        ]
    }
}</programlisting>
      </example>
    </section>
    <section xml:id="createRules-d101">
      <title>Creating rules</title>
      <para>When you create a service with the operation described at <link
          xlink:href="http://docs.rackspace.com/cdn/api/v1.0/cdn-devguide/content/POST_createService__services_servicesOperations.html"
          xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
          >Create a service</link>, within the request, you can define rules for the service for the
        following parameters: </para>
      <itemizedlist>
        <listitem>
          <para><code>origins</code>: Specifies a collection of rules that define the conditions
            when the origin should be accessed. If there is more than one origin,the rules parameter
            is required.  </para>
          <para>The <code>origin.rules</code> parameter supports the <code>name</code> and
              <code>request_url</code> parameters.</para>
        </listitem>
        <listitem>
          <para><code>caching</code>: Specifies a collection of rules that determine if the TTL
            should be applied to an asset. </para>
          <para>The <code>caching.rules</code> parameter supports the <code>name</code> and
              <code>request_url</code> parameters. </para>
        </listitem>
        <listitem>
          <para><code>restrictions</code>: Specifies a collection of rules that define the
            restrictions to impose on the service. Rules can be combined together.  </para>
          <para>The <code>retrictions.rules</code> parameter supports <code>name</code> and
              <code>referrer</code> parameters. </para>
        </listitem>
      </itemizedlist>
      <note>
        <para>Each of the parameters above are described in <link
            xlink:href="http://docs.rackspace.com/cdn/api/v1.0/cdn-devguide/content/POST_createService__services_servicesOperations.html"
            xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
            >Create a service</link>. </para>
      </note>
      <para>These rules are stored in a policy file at every edge server and are applied to your
        traffic when a request is issued that matches the path of your rule. For that reason,
        creating rules for your content always begins by setting a path for which the rule should be
        applied. Because Rackspace CDN applies rules using a path, you can specify rules as granular
        as the file level.  </para>
      <para>Within the Rackspace CDN API, paths are defined using the <code>domain</code> and
          <code>origin</code> parameters in the request to create a service. Then, for example, with
        the <code>caching.rules</code>, you might set <code>ttl</code> equal to 3600 seconds (1
        hour) for a specific file by making the rule path
          <code>/videos/marketingspot/abccompany/welcomevideo.mp4</code>. </para>
      <para>For more information, see <link xlink:href="https://www.rackspace.com/knowledge_center/article/rackspace-cdn-edge-rules">Rackspace CDN edge rules</link>.</para>

      <section xml:id="ruleOrder-de101">
        <title>Rule ordering</title>
        <para>When you specify multiple rules within one rule type, such as <code>origins</code>,
            <code>caching</code>, or <code>restrictions</code>, the order of these rules is very
          important.  </para>
        <para>When content comes into the CDN network for a Rackspace CDN domain, rules in the
          policy file are evaluated from top to bottom. The last rule matching the requesting URL is
          applied.    </para>
        <para>If any parameter definitions are specified more than once in a set of rules, the last
          definition overrides those definitions that precede it. In some cases, the ordering of
          different parameter definitions that perform similar functions for the service might also
          matter. In other cases, you can reuse the same parameter definitions to do different
          things that do not conflict with each other. </para>
        <para>For example, a URL
            of <code>www.mywebsite.com/videos/marketingspot/abccompany/welcomevideo.mp4</code>
          matches all of the following rule paths: <itemizedlist>
            <listitem>
              <para><code>www.mywebsite.com</code></para>
            </listitem>
            <listitem>
              <para><code>www.mywebsite.com/videos</code></para>
            </listitem>
            <listitem>
              <para><code>www.mywebsite.com/videos/marketingspot</code></para>
            </listitem>
            <listitem>
              <para><code>www.mywebsite.com/videos/marketingspot/abccompany</code></para>
            </listitem>
            <listitem>
              <para><code>www.mywebsite.com/videos/marketingspot/abccompany/welcomevideo.mp4</code></para>
            </listitem>
          </itemizedlist> </para>
        <note>
          <para>Because all of the paths match the rule, you must order rules from least specific to
            most specific, as shown above. </para>
        </note>
        <para>When defining the path, you can use wildcards. For example, <code>/*</code> to mean
          the whole site or include <code>*.mp4</code>.</para>
        <para>In your request, if you define a set of caching rules with the paths in the following
          order, the last rule matches and assigns the TTL to 3600 seconds (or 1 hour) rather than
          259200 seconds (or 3 days):</para>
        <para><code>www.mywebsite.com/videos/marketingspot</code> ----->with
            <code>"ttl":259200</code> set in <code>caching.rules</code>
          <code>www.mywebsite.com/videos</code> ----->with <code>"ttl":3600</code> set in
            <code>caching.rules</code></para>
      </section>
      <section xml:id="multipleCachRules">
        <title>Multiple caching rules example</title>
        <para>Caching rules are designed to determine how long your content should live on the edge
          before checking the origin for an update. If your content changes frequently, you might
          want to set up a Time To Live (TTL) rule that pulls every few minutes. If your content
          does not change frequently, we suggest that you set a longer TTL of 12 to 24 hours. If
          creating multiple rules, you must order rules from least specific to most specific. </para>
        <para>For example, you want most of the content on your website to have a TTL of 3 days. The
          only exception is your dynamic content, hosted on your origin at <code>/dynamic</code>,
          which you want to have a TTL of 0 because the experience changes for every user.  </para>
        <para>In this case, you should order your TTL <code>caching.rules</code> as follows:</para>
        <para><code>www.mywebsite.com</code> -----> with <code>"ttl":259200</code> set in
            <code>caching.rules</code>
          <code>www.mywebsite.com/dynamic</code> -----> with <code>"ttl":0</code> set in<code>
            caching.rules</code></para>
      </section>
      <section xml:id="multipleOriginRules">
        <title>Multiple origin rules example</title>
        <para>If you have multiple infrastructures setup to serve a single domain, you should use
          origin rules. Adding an additional origin always requires that you add a rule for which
          traffic should pull from that origin. If you create multiple rules, you must order rules
          from least specific to most specific. </para>
        <para>For example, most of the content from your website should pull from your Cloud Server
          origin, hosted at <code>origin.cloudserver.com</code>. However, any requests with the URL
            <code>website.com/dedicated</code> should be routed to your dedicated server, hosted at
            <code>origin.dedicatedserver.com</code>. In this case, you should order your
            <code>origin.rules</code> as follows:  </para>
        <para><code>origin.cloudserver.com</code> -----> with
            <code>origin=origin.cloudserver.com</code> in <code>origin.rules</code>
          <code>origin.dedicatedserver.com</code> -----> with
            <code>origin=origin.dedicatedserver.com</code> in <code>origin.rules</code></para>
      </section>
      <section xml:id="referrerRules">
        <title>Referrer rules example</title>
        <para>Restriction rules limit who can see your content and are designed to show a list of
          traffic you allow. For example, a <code>referrer</code> value of <code>website.com</code>
          would <emphasis role="italic">allow</emphasis> traffic being requested from
            <code>website.com</code>.</para>
        <para>Referrer restrictions are slightly different in that they are always applied to the
          full site.  In other words, Rackspace CDN always sets your referrer restriction to have a
          path of <code>/</code>.  </para>
        <para>When using referrer rules, you want to prevent your content from being hot-linked by
          other pages on the internet. Without this, someone might copy the link to your images and
          serve those images on their site while your pay for the bandwidth.  </para>
        <para>To avoid this, set up a rule that only allows your content to be served to an end user
          if it is being requested by your domain.  </para>
        <para>To do this, set up <code>restrictions.rules.referrer</code> similar to the following
          definition:</para>
        <para><code>/</code> -----> with <code>"referrer":"www.mywebsite.com"</code> set in
            <code>restrictions.rules</code>
        </para>
        <para>Again, in this scenario, Rackspace CDN only asks you for the referring domain, and the
          rule is always applied to the entire CDN-enabled domain.  </para>
      </section>
    </section>
    <section xml:id="testingCDN">
      <title>Testing the CDN</title>
      <para>Because the Akamai server requires that you use a CNAME for the site to access Akamai,
        we recommend that you use a test domain to validate end-to-end CDN functionality with
        Akamai. For example, if the goal is to enable <code>www.example.com</code> with Akamai, you
        might create a test hostname such as <code>test-www.example.com</code>, use the CNAME to
        access the same partner endpoint as the <code>www.example.com</code>, and create a copy of
        the policy via the API so that it uses the same origin. </para>
      <para>If required, the policy might override the <code>Host</code> header sent to the origin
        to use the “fixed” value <code>www.example.com</code> as shown here. (Note: All other
        behaviors such as TTLs should match the <code>www.example.com</code> policy.)</para>
    </section>
  </chapter>
  <chapter xml:id="apiOperations-d101" xmlns="http://docbook.org/ns/docbook" role="api-reference">
    <title>API operations</title>
    <para>This chapter describes each of the Rackspace CDN operations, which are summarized in the
      following table. </para>
    <section xml:id="baseOperations">
      <title>Base operations</title>
      <para>The section describes the following base operations of the Rackspace CDN API.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#version">
          <wadl:method href="#getHomeDocument"/>
        </wadl:resource>
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#ping">
          <wadl:method href="#getPing"/>
        </wadl:resource>
      </wadl:resources>
    </section>
    <section xml:id="servicesOperations">
      <title>Services</title>
      <para>The section describes the following services operations of the Rackspace CDN API.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#services">
          <wadl:method href="#getAllServices"/>
          <wadl:method href="#createService"/>
        </wadl:resource>
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#service_id">
          <wadl:method href="#getService"/>
          <wadl:method href="#patchService"/>
          <wadl:method href="#deleteService"/>
        </wadl:resource>
      </wadl:resources>
    </section>
    <section xml:id="serviceAssetsOperations">
      <title>Services assets</title>
      <para>A service distributes assets across the network. Service assets let you interrogate
        properties about these assets and perform certain actions on them. </para>
      <para>The section describes the following operation related to service assets.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#assets">
          <!-- <remark>This operation was removed in November 2014 because it wasn't widely supported by CDN vendors (fastly yes, Akamai no). </remark>
          <wadl:method href="#getCachedAsset"/> -->
          <wadl:method href="#deleteCachedAsset"/>
        </wadl:resource>
      </wadl:resources>
    </section>
    <!-- No yet available
    <section xml:id="serviceAnalyticsOperations">
      <title>Services analytics (To Do????)</title>
      <para>Service analytics report usage data (hits, misses, and so on) about the service. </para>
      <para>The section describes operations related to service analytics.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#analytics">
          <wadl:method href="#getAssetAnalytics"/>
        </wadl:resource>
      </wadl:resources>
    </section> -->
    <section xml:id="flavorsOperations">
      <title>Flavors</title>
      <para>A flavor is a mapping configuration to a CDN provider.</para>
      <para>The section describes the following operations related to flavors.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#flavors">
          <wadl:method href="#getFlavors"/>
        </wadl:resource>
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#flavor_id">
          <wadl:method href="#getFlavorDetails"/>
        </wadl:resource>
      </wadl:resources>
    </section>
    <!-- Not yet available
    <section xml:id="loggingOperations">
      <title>Logging</title>
      <para>Rackspace CDN has the ability to instruct CDN providers about where to transfer the logs
        for CDN traffic. The operator can then parse these logs for various tasks such as analytics,
        billing, and support.</para>
      <para>The section describes the operations related to logging.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#logging">
          <wadl:method href="#getLogging"/>
          <wadl:method href="#postLogging"/>
        </wadl:resource>
      </wadl:resources>
    </section> -->
    <!-- Not available for Early Access  
    <section xml:id="streamingOperations">
      <title>Streaming (To Do)</title>
      <para>Rackspace CDN supports video streaming, with Adaptive Bit Rate, HLS/HDS, and some sort of transcoding of a video.</para>
      <para>The section describes the operations related to streaming.</para>
    
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/cdn-devguide.wadl#version">
          <wadl:method href="#getHomeDocument"/>
        </wadl:resource>
      </wadl:resources>
    </section> -->
  </chapter>
  <glossary xml:id="glossary-d1e018" xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Glossary</title>
    <glossentry xml:id="claim-d1e017">
      <glossterm>Caching rule</glossterm>
      <glossdef>
        <para>A caching rule provides you with fine-grained control over the time-to-live (TTL) of
          an object. When the TTL expires for an object, the edge node pulls the object from the
          origin again.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Content delivery network</glossterm>
      <glossdef>
        <para>A content delivery network (CDN) is a system of multiple computers that contains
          copies of data stored at various network nodes. A CDN is designed to improve performance
          of publicly distributed assets. Assets can be anything from website content, to web
          application components, to media such as videos, ads, and interactive experiences.  CDNs
          decrease the load time of these assets by caching them on edge nodes, also called edge
          servers or point of presence (PoPs) servers.  Edge nodes are distributed around the globe,
          so requests travel to a local location to get assets rather than to and from a data center
          based far from the end user. </para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Domain</glossterm>
      <glossdef>
        <para>A domain represents the domain name through which visitors retrieve content. The
          underlying site might be served through a CDN. A service can have multiple domains. The
          CDN provider provides users with a Canonical Name (CName) to specify for their domain name
          as an alias.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="message-d1e016">
      <glossterm>Edge node</glossterm>
      <glossdef>
        <para>CDN providers have many points of presence (PoP) servers around the world. These
          servers are known as edge nodes. These edge nodes cache the content and serve it directly
          to customers, thus reducing transit time to a customer's location.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Edge server</glossterm>
      <glossdef>
        <para>An edge server is the same as an edge node. </para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Flavor </glossterm>
      <glossdef>
        <para>A flavor is a mapping configuration to a CDN provider that enables you to decide which
          CDN features that you want your service to use. In the request and response examples for
          Rackspace CDN, the flavor is referred to with the <code>flavor_id</code> parameter. For
          this release of Rackspace CDN, the <code>flavor_id</code> value is <code>cdn</code>. The
            <code>cdn</code> flavor enables your service content to be delivered across the network
          using the Rackspace CDN partner, Akamai. In the future, Rackspace might offer other
          flavors.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>JSON Pointer</glossterm>
      <glossdef>
        <para>A JSON Pointer defines a syntax for identifying a specific value within a JSON
          document. A restricted JSON pointer is a Unicode string containing a sequence of exactly
          one reference token, prefixed by a '/' (%x2F) character. Each reference token is a
          sequence of unreserved and/or percent-encoded characters.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Origin</glossterm>
      <glossdef>
        <para>An origin is an address (IP or domain) from which the CDN provider pulls content. A
          service can have multiple origins.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Point of presence</glossterm>
      <glossdef>
        <para>A point of presence (PoP) is the point at which two or more different networks or
          communication devices build a connection with each other. PoP mainly refers to an access
          point, location, or facility that connects to and helps other devices establish a
          connection with the Internet. </para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Purge</glossterm>
      <glossdef>
        <para>Purging removes content from the edge nodes thus invalidating the content so that the
          content can be refreshed from your origin servers.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="queue-d1e019">
      <glossterm>Restriction</glossterm>
      <glossdef>
        <para>A restriction enables you to define rules about who can or cannot access content from
          the cache. Examples of a restriction are allowing requests only from certain domains,
          geographies, or IP addresses.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="subscriber-d1e018">
      <glossterm>Service</glossterm>
      <glossdef>
        <para>A service represents an application that has its content cached to the edge
          nodes.</para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Status</glossterm>
      <glossdef>
        <para>The status indicates the current state of a service. The time it takes for a service
          configuration to be distributed to a CDN provider cache can vary. </para>
      </glossdef>
    </glossentry>
  </glossary>
</book>
